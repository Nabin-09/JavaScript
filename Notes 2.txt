Scopes :
"scope" refers to the accessibility and visibility of variables and functions within your code.
It defines the context in which variables and functions are declared and where they can be accessed.
code :
Globally scoped 
// let a = 10;
// const b = 21;
// console.log(a);//10 
// console.log(b);//21
block scoped :
if(true){
    let a = 10;
    const b = 20;
    var c = 30;
}
console.log(a);//a is not defined 
console.log(c);//30 hence use of var is deprecated.
remember : Node scope and Windows scope are different.
------------------------------------------------------
Scope level and Mini Hoisting :
code : (closure of functions)
function one (){
    const username = "Nabin"
    function two (){//can access all elements of one
        const website = "youtube.com"
        console.log(username);
    }
    console.log(website);//cannot acces website outside two
    two()//prints Nabin
}
one()
code : 
 if(true){
    const username = "Nabin"
    if(username === "Nabin"){
        const website = " youtube "
        console.log(username + website);
    }
    // console.log(username + website);// cannot access website outside scope 
}
// console.log(username); throws error out of scope
Hoisting : Hoisting in JavaScript is a mechanism where variable and function 
declarations are moved to the top of their containing scope during the compilation phase, before the code is executed. This means 
that regardless of where variables and functions are declared within their scope, they are treated as if they were declared at the top.
code : 
//Hoisting :
console.log(addone(5));//Prints 6 even if function is declared later
function addone (num){
    return num + 1;
}
console.log(ans);//throws error as ans is defined later and it stores values of addtwo
const ans = function addtwo(num){
    return num + 2;
}
This keyword :
console.log(this) prints {} in node environment(standalone).
if console.log(this) is ran in Console (browser) return Window object (most used global object)
 code : 
function chai(){
    let username = "Nitesh"
    console.log(this);
}
chai()
/* OUTPUT : <ref *1> Object [global] {
  global: [Circular *1],
  clearImmediate: [Function: clearImmediate],
  setImmediate: [Function: setImmediate] {
    [Symbol(nodejs.util.promisify.custom)]: [Getter]
  },
  clearInterval: [Function: clearInterval],
  clearTimeout: [Function: clearTimeout],
  setInterval: [Function: setInterval],
  setTimeout: [Function: setTimeout] {
    [Symbol(nodejs.util.promisify.custom)]: [Getter]
  },
  queueMicrotask: [Function: queueMicrotask],
  structuredClone: [Function: structuredClone],
  atob: [Getter/Setter],
  btoa: [Getter/Setter],
  performance: [Getter/Setter],
  fetch: [Function: fetch],
  crypto: [Getter]
} */ 
 code : 
 const chai3 = function (){
  let username = "Nabin "
  console.log(this.username); // undefined
}
/* arrow function : */
const chai2 = ()  => {
  let username = "Nabin"
  console.log(this);
}
chai3(); // undefined
chai2(); // {}
const addtwo = (num1,num2) => {
  return num1 + num2;
}
/* Implicit return :
 const addtwo = (num1.num2) => return (num1 + num2) (used when only one line in function)
 write return keyword when we use { } in a function and skip it when we use () */
console.log(addtwo(7,9));//prints 16
--------------------------------------------------------------------------------------------------------------------------------------------
 IIFE : Immediate Invoke Function Expression 
IIFE : IIFE stands for Immediately Invoked Function Expression. It is a JavaScript function that runs as soon as it is defined.
code : 
 //Immediately Invoked Function Expression (IIFE)
function chai(){
    console.log(`DB connected`);
}
chai(); //(use ; while using IIFE ,prints DB connected
(function addTwo(){
    console.log(`This is IIFE`)
}) // first paranthesis si for definition of function 
(); // parentheseis for execution prints this is IIFE
/*Passing Parameters to Fucntion */
((name) => {
    console.log(`DB connected ${name}`);
})('Nabin'); //Prints DB connected Nabin
 --------------------------------------------------------------------------------------------------------------------------------------------
Java Execution Context :
 : {} - Global Execution Context.(this)
 : Fucntion Execution Context.
 : Eval Execution Context.
JS is a single threaded language.
Phases :
Memory Creation phase :
code :
let val1 = 10;
let val2 = 20;
function adnum(num1,num2){
    let total = num1 + num2;
    return total;
}
let result = adnum(val1,val2);
let result2 = adnum(60,80);
/*Global execution happens first(allocated under 'this') - it will always occur
Memory Phase : 
val1 -> undefined 
val2 -> undefined 
adnum -> definiton 
result -> undefined
result2 -> undefined
Execution phase :
val1 <- 10
val2 <- 20
adnum -> creates executional context box 1 = (includes new variable environment + execution thread)
box1 has Memory phase = val1 -> undefined, val2 = undefined,total -> undefined. 
box1 then goes for Executional context num1->10,num2->20
and then executional context deletes. */
---------------------------------------------------------------------------------------------------------------------
IF - Else statement :
//if statement
if(true){
    console.log(9);//Prints
}
if (false){
    console.log(10);//doesnt print
}
const userLoggedIn = true
if(userLoggedIn){
  console.log(`Nabin is logged in `);
}
/* relational OPerators :
 <,>.!=,==,===,<=,>= */
 /* If - Else combination , if does not execute the else block occurs,hence these are block statements */
 const temp = 11;
 if(temp > 35){
    console.log(`Its Hot`);
 }
 else{
    console.log(`Its chilled`);//this block runs
 }
 // &&(AND)-> true when both conditions true  and ||(OR) -> true if any one of the conditions are true.
------------------------------------------------------------------------------------------------------------------
Truthy falsy and Nullsceing Operator :
const email = "nabin98@gmail.com"
if(email){//assuming that string has true email,even runs when we send an array
    console.log("Got Email");
}
else{//runs when empty string
    console.log("Didn't get");
}
/* Flasy values
false
0 
-0
0n
""
null,undefined
Nan */
/* All other than Falsy values are truthy values
special ones : "0" , 'false'," ",[],{},function(){} */
const emptyObj = {}
if(Object.keys(emptyObj).length == 0){//Checking Object in conditionals
    console.log("Object is not empty");
}
//Nullish Coalescing Operator (??): null undefined
let val1;
val1 = 5??10
console.log(val1);//5
let val2 
val2 = null??10
console.log(val2);//10
//rejects values null and undefined
let val3
val3 = null??undefined
console.log(val3);//undefined
console.log(val3);//undefined
let val4 = null ?? 10 ?? 20
console.log(val4);//10
// ternary operator
/* Condition ? true : false
 */
const iceprice = 100 ? console.log("more than 99") : console.log("less than 99");
--------------------------------------------------------------------------------------------------------------------
Iterators/loops - For loop :

for (let index = 0; index < 10; index++) //(initialisation ; condition check: counter)
{
    const element = index;
    console.log(element);//prints 1-9
}
// Loops in loops
for(let i=0 ;i<4 ;i++){
    console.log(`Outer loop ${i}`);
    for(let j = 0 ;j<4;j++){
        console.log(`Outer loop : ${i} and outer loop ${j}`);
    }
} /*Outer loop 0
Outer loop : 0 and outer loop 0
Outer loop : 0 and outer loop 1
Outer loop : 0 and outer loop 2
Outer loop : 0 and outer loop 3
Outer loop 1
Outer loop : 1 and outer loop 0
Outer loop : 1 and outer loop 1
Outer loop : 1 and outer loop 2
Outer loop : 1 and outer loop 3
Outer loop 2
Outer loop : 2 and outer loop 0
Outer loop : 2 and outer loop 1
Outer loop : 2 and outer loop 2
Outer loop : 2 and outer loop 3
Outer loop 3
Outer loop : 3 and outer loop 0
Outer loop : 3 and outer loop 1
Outer loop : 3 and outer loop 2
Outer loop : 3 and outer loop 3 */
//Break and continue
for (let index = 0; index <= 20; index++) {
    const element = index;
    if(element==5){
        console.log(`Detected 5`);
        break;
    }
    console.log(`Value of i is ${element}`);
}
/* output : 
Value of i is 0
Value of i is 1
Value of i is 2
Value of i is 3
Value of i is 4 */
for (let index = 0; index <= 20; index++) {
    const element = index;
    if(element==5){
        console.log(`Detected 5`);
        continue;
    }
    console.log(`Value of i is ${element}`);
}/* Skips iterations :
Value of i is 0
Value of i is 1
Value of i is 2
Value of i is 3
Value of i is 4
Detected 5
Value of i is 6
Value of i is 7
Value of i is 8
Value of i is 9
Value of i is 10
Value of i is 11
Value of i is 12
Value of i is 13
Value of i is 14
Value of i is 15
Value of i is 16
Value of i is 17
Value of i is 18
Value of i is 19
Value of i is 20 */
----------------------------------------------------------------------------------------------------------------------
while Loop :
let index = 0
while(index < 10){
    console.log(`Value of Index is ${index}`);
    index = index + 2;
}
/* O/P :
Value of Index is 0
Value of Index is 2
Value of Index is 4
Value of Index is 6
Value of Index is 8  */
let myArr = ['Batman','Nabin','Papa']
let arr = 0;
while(arr<myArr.length){
    console.log(`The SuperHero is ${myArr[arr]}`);
    arr++;
}
/*Output : 
The SuperHero is Batman
The SuperHero is Nabin
The SuperHero is Papa */
//Do while 
let score = 0;
do {
    console.log(`Score is ${score}`);
    score++
}
while (score<10);
/*Score is 0
Score is 1
Score is 2
Score is 3
Score is 4
Score is 5
Score is 6
Score is 7
Score is 8
Score is 9 
if score was intialised at 11 : Score is 11 prints*/
-----------------------------------------------------------------------------------------------------------------------------
For of loops :
 code : 
//for of 
const arr = [1,2,3,4,5]
for (const val of arr) //for(iterator of Object) -> Object refers to a thing and not the JS object
    {
    console.log(val);
}//1 2 3 4 5
const greeting = "HORNY HO "
for(const greet of greeting){
    console.log(`Each char is ${greet}`);
}
const mpp = new Map()
mpp.set("IN","INDIA")
mpp.set("EN","ENGLAND")
mpp.set("FR","FRANCE")
console.log(mpp); // Map(3) { 'IN' => 'INDIA', 'EN' => 'ENGLAND', 'FR' => 'FRANCE' }
for(const key of mpp){
    console.log(key);
    /*[ 'IN', 'INDIA' ]
    [ 'EN', 'ENGLAND' ]
    [ 'FR', 'FRANCE' ] */
}
// to print keys
for(const [key,value] of mpp){
    console.log(key,':-',value);
    /*IN :- INDIA
    EN :- ENGLAND
    FR :- FRANCE */
}
for(const [key] of mpp){
    console.log(key);
    /*IN
    EN
    FR */
}
const myObj = {
    'game1' : 'Spiderman',
    'game2' : 'Batman',
    'game3' : 'KrazyMad'
}
/*for(const [key,value] of myObj){
    console.log(key,":-",value) throws error(now iterable)
}*/
for (const key in myObj){
    // console.log(key); printS all the keys
    console.log(`${key} :- ${myObj[key]}`);
    /*game1 :- Spiderman    
    game2 :- Batman
    game3 :- KrazyMad */
}
const languages = ['php','cpp','java','JS']
for (const key in languages){
    // console.log(key);// 0 1 2 3 4
    console.log(languages[key]);
    /*php
      cpp
      java
      JS */
Maps aren't iterable and we cannot iterate through maps using for in loop
for(const key in mpp){
console.log(key)//prints nothing
}
---------------------------------------------------------------------------------------------------------------------------
for each loop : 
const lang = ['cpp','js','java','php','ruby']
lang.forEach(function greet(val){
    console.log(val);
})
/*cpp
  js
  java
  php
  ruby */
//using arrow function
lang.forEach((item) =>{
    console.log(item);//prints all items in array
})
/*Alternate way of using for each
function printme (items) {
    console.log(items);
}
lang.forEach(printme)
*/
myCoding  = [
    {
        langname : 'cpp',
        langfile : 'cpp'
    },
    {
        langname : 'java',
        langfile : 'file'
    },
    {
        langname : 'JAvascript',
        langfile : 'JS'
    }
]
myCoding.forEach((item) => {
    console.log(item.langname);// cpp java JAvsscript
})
-----------------------------------------------------------------------------------------------------------------------------------------------
code : 
/*const coding = ['php','ruby','cpp','js']

const values = coding.forEach((item) => {
    console.log(item);
    return item;//for each wont ever return any value
})
console.log(values)
o/p : 
php
ruby
cpp
js
undefined*/
const MyNums = [1,2,3,4,5,6,7,8,9]
//MyNums.filter(() => {})
const nums = MyNums.filter((num) => num>4) // returns values 
console.log(nums);//[5,6,7,8,9]
//if we start scope by using {  } e will ahve to use return keyword.
//Doing above process using For Each
const NewNums = []
MyNums.forEach((item)=>{
    if(item>4){
        NewNums.push(item)
    }
})
console.log(NewNums); // [5,6,7,8,9]

}





